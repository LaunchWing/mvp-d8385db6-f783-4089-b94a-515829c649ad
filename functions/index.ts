// Auto-generated by sanitizeGeneratedFiles

const handler0 = async (context) => {
export async function onRequest(context) {
  const { request } = context;
  const url = new URL(request.url);
  switch (request.method) {
    case 'POST':
      return handleCreateUserProfile(request);
    case 'PUT':
      return handleUpdateUserProfile(request);
    default:
      return new Response('Method Not Allowed', { status: 405 });
  }
}
async function handleCreateUserProfile(request) {
  try {
    const userData = await request.json();
    // Logic to create user profile
    const createdProfile = await createUserProfile(userData);
    return new Response(JSON.stringify({ success: true, profile: createdProfile }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    return new Response(JSON.stringify({ success: false, error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
}
async function handleUpdateUserProfile(request) {
  try {
    const userData = await request.json();
    // Logic to update user profile
    const updatedProfile = await updateUserProfile(userData);
    return new Response(JSON.stringify({ success: true, profile: updatedProfile }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    return new Response(JSON.stringify({ success: false, error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
}
async function createUserProfile(data) {
  // Placeholder for user profile creation logic
  return { id: 1, ...data };
}
async function updateUserProfile(data) {
  // Placeholder for user profile update logic
  return { id: data.id, ...data };
}
};

const handler1 = async (context) => {
export async function onRequest(context) {
  const { request } = context;
  const url = new URL(request.url);
  switch (request.method) {
    case 'POST':
      return handleCreateSubscription(request);
    case 'DELETE':
      return handleCancelSubscription(request);
    default:
      return new Response('Method Not Allowed', { status: 405 });
  }
}
async function handleCreateSubscription(request) {
  try {
    const subscriptionData = await request.json();
    // Logic to create subscription
    const createdSubscription = await createSubscription(subscriptionData);
    return new Response(JSON.stringify({ success: true, subscription: createdSubscription }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    return new Response(JSON.stringify({ success: false, error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
}
async function handleCancelSubscription(request) {
  try {
    const subscriptionData = await request.json();
    // Logic to cancel subscription
    const canceledSubscription = await cancelSubscription(subscriptionData);
    return new Response(JSON.stringify({ success: true, subscription: canceledSubscription }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    return new Response(JSON.stringify({ success: false, error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
}
async function createSubscription(data) {
  // Placeholder for subscription creation logic
  return { id: 1, ...data };
}
async function cancelSubscription(data) {
  // Placeholder for subscription cancellation logic
  return { id: data.id, status: 'canceled' };
}
};

export async function onRequest(context) {
  const url = new URL(context.request.url);
  if (url.pathname.includes("route0")) return handler0(context);
  if (url.pathname.includes("route1")) return handler1(context);
}
